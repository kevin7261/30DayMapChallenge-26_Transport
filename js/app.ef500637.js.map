{"version":3,"file":"js/app.ef500637.js","mappings":"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","sources":["webpack://30DayMapChallenge-26_Transport/./src/App.vue","webpack://30DayMapChallenge-26_Transport/./src/App.vue?7ccd","webpack://30DayMapChallenge-26_Transport/./src/views/HomeView.vue","webpack://30DayMapChallenge-26_Transport/./src/tabs/MapTab.vue","webpack://30DayMapChallenge-26_Transport/./src/stores/dataStore.js","webpack://30DayMapChallenge-26_Transport/./src/tabs/MapTab.vue?15ab","webpack://30DayMapChallenge-26_Transport/./src/views/HomeView.vue?1da1","webpack://30DayMapChallenge-26_Transport/./src/router/index.js","webpack://30DayMapChallenge-26_Transport/./src/main.js","webpack://30DayMapChallenge-26_Transport/webpack/bootstrap","webpack://30DayMapChallenge-26_Transport/webpack/runtime/chunk loaded","webpack://30DayMapChallenge-26_Transport/webpack/runtime/compat get default export","webpack://30DayMapChallenge-26_Transport/webpack/runtime/define property getters","webpack://30DayMapChallenge-26_Transport/webpack/runtime/global","webpack://30DayMapChallenge-26_Transport/webpack/runtime/hasOwnProperty shorthand","webpack://30DayMapChallenge-26_Transport/webpack/runtime/jsonp chunk loading","webpack://30DayMapChallenge-26_Transport/webpack/startup"],"sourcesContent":["<script>\n  /**\n   * 🏠 App.vue - 應用程式主組件\n   *\n   * 功能說明：\n   * 1. 🏗️ 提供應用程式整體框架和佈局結構\n   * 2. ⏳ 管理全域載入狀態和進度顯示\n   * 3. 🚀 管理 Vue Router 的路由導航系統\n   * 4. 📱 實現響應式滿版佈局，無邊距和空隙\n   *\n   * 架構說明：\n   * - 內容層：路由視圖容器，動態顯示不同頁面組件\n   *\n   * 設計理念：\n   * - 滿版無邊距佈局設計\n   * - 模組化組件架構\n   */\n\n  export default {\n    name: 'App',\n  };\n</script>\n\n<template>\n  <!-- 🏠 App.vue - 主應用程式組件 (Main Application Component) -->\n  <!-- 提供應用程式整體框架，使用 Bootstrap 實現滿版無空隙佈局 -->\n  <div id=\"app\" class=\"d-flex flex-column vh-100\">\n    <!-- 📱 主要內容區域 (Main Content Area) -->\n    <div class=\"d-flex flex-column overflow-hidden\">\n      <router-view />\n    </div>\n  </div>\n</template>\n\n<style>\n  /**\n * 🎨 應用程式全域樣式 (Application Global Styles)\n *\n * 引入共用 CSS 並定義應用程式層級的樣式\n * 注意：大部分樣式已移至 common.css 中統一管理\n */\n\n  /* 📦 引入共用樣式表 (Import Common Stylesheets) */\n  @import './assets/css/common.css';\n\n  /* 📱 應用程式特定樣式 (App-Specific Styles) */\n  /* 其他樣式已整合至 common.css 中，避免重複定義 */\n</style>\n","import { render } from \"./App.vue?vue&type=template&id=1e6196ea\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=1e6196ea&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<script>\n  /**\n   * 🏠 HomeView.vue - 主頁面組件 (Main Page Component)\n   *\n   * 這是應用程式的主頁面，顯示全屏世界地圖。\n   * 主要功能：\n   * - 顯示全屏世界地圖\n   * - 使用麥卡托投影\n   * - 響應式佈局設計\n   *\n   * 組件結構：\n   * - MapTab: 地圖顯示組件（全屏）\n   */\n\n  import MapTab from '../tabs/MapTab.vue';\n  import { useDataStore } from '@/stores/dataStore.js';\n\n  export default {\n    name: 'HomeView',\n    components: { MapTab },\n    setup() {\n      // 📦 存儲實例\n      const dataStore = useDataStore();\n\n      /**\n       * 🗺️ 設定地圖實例\n       * 將 D3.js 地圖實例傳遞給 dataStore\n       * @param {Object} map - D3.js 地圖實例（包含 svg, projection, path）\n       */\n      const setMapInstance = (map) => dataStore.setMapInstance(map);\n\n      return {\n        setMapInstance,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🏠 全屏地圖容器 -->\n  <div class=\"vh-100 vw-100 overflow-hidden\">\n    <!-- 🗺️ 地圖組件（全屏） -->\n    <MapTab @map-ready=\"setMapInstance\" />\n  </div>\n</template>\n\n<style>\n  @import '../assets/css/common.css';\n</style>\n","<script>\n  /**\n   * ═══════════════════════════════════════════════════════════════════════════\n   * 🗺️ MapTab.vue - D3.js 台灣地圖組件\n   * ═══════════════════════════════════════════════════════════════════════════\n   *\n   * @fileoverview\n   * 這是一個基於 D3.js 的台灣地圖視覺化組件，同時顯示縣市界線和登革熱網格數據。\n   * 本組件負責載入、處理和渲染台灣直轄市、縣(市)界線和登革熱病例網格數據。\n   *\n   * ─────────────────────────────────────────────────────────────────────────\n   * 📋 核心功能\n   * ─────────────────────────────────────────────────────────────────────────\n   * 1. 縣市邊界渲染：\n   *    ✓ 載入直轄市、縣(市)界線1140318.geojson\n   *    ✓ 繪製所有台灣直轄市、縣(市)界線\n   *\n   * 2. 登革熱網格渲染：\n   *    ✓ 載入 dengue_grid_counts_1km_2023_land_only.geojson\n   *    ✓ 根據 level 屬性繪製5級風險等級網格\n   *    ✓ 只顯示病例數 > 0 的網格\n   *    ✓ 使用5級色票：深藍(1) → 綠(2) → 黃橙(3) → 橙(4) → 紅(5)（最上層）\n   *\n   * 3. 視覺元素：\n   *    ✓ 縣市界線：淺灰細邊框，無填充（底層）\n   *    ✓ 登革熱網格：5級色票填充，無邊框（最上層）\n   *    ✓ 白色地圖背景\n   *\n   * 4. 交互功能：\n   *    ✓ 滾輪縮放控制\n   *    ✓ 拖動平移導航\n   *    ✓ 滑鼠懸停顯示網格屬性資訊\n   *    ✓ 網格高亮效果\n   *\n   * ─────────────────────────────────────────────────────────────────────────\n   * 🎨 配色主題\n   * ─────────────────────────────────────────────────────────────────────────\n   * 白色      #ffffff  → 地圖背景\n   * 淺灰色    #cccccc  → 縣市邊框\n   * 無填充    none     → 縣市區域\n   * 5級色票            → 登革熱風險等級（最上層）\n   *   Level 1  #1a237e → 深藍色\n   *   Level 2  #4caf50 → 綠色\n   *   Level 3  #fbc02d → 黃橙色\n   *   Level 4  #ff6f00 → 橙色\n   *   Level 5  #d32f2f → 紅色\n   *\n   * ─────────────────────────────────────────────────────────────────────────\n   * 🛠️ 技術棧\n   * ─────────────────────────────────────────────────────────────────────────\n   * @requires vue                 - Vue 3.2+ (Composition API)\n   * @requires d3                  - D3.js 7.8+ (地圖繪製庫)\n   * @requires @/stores/dataStore  - Pinia 狀態管理\n   *\n   * ─────────────────────────────────────────────────────────────────────────\n   * 📁 數據來源\n   * ─────────────────────────────────────────────────────────────────────────\n   * 直轄市、縣(市)界線：直轄市、縣(市)界線1140318.geojson\n   * 登革熱網格數據：dengue_grid_counts_1km_2023_land_only.geojson\n   * 路徑：public/data/geojson/\n   *\n   * ─────────────────────────────────────────────────────────────────────────\n   * 🔧 使用方式\n   * ─────────────────────────────────────────────────────────────────────────\n   * <MapTab @map-ready=\"handleMapReady\" />\n   *\n   * @event map-ready - 地圖初始化完成時觸發，返回地圖實例\n   *\n   * ─────────────────────────────────────────────────────────────────────────\n   * 📝 維護者\n   * ─────────────────────────────────────────────────────────────────────────\n   * @author Kevin Cheng\n   * @version 4.0.0\n   * @since 2024\n   * @license MIT\n   *\n   * ═══════════════════════════════════════════════════════════════════════════\n   */\n\n  // ═══════════════════════════════════════════════════════════════════════════\n  // 📦 依賴導入 (Dependencies Import)\n  // ═══════════════════════════════════════════════════════════════════════════\n\n  // Vue 3 核心功能\n  import { ref, onMounted, onUnmounted, nextTick } from 'vue';\n\n  // D3.js 地圖庫\n  import * as d3 from 'd3';\n\n  // Pinia 狀態管理\n  import { useDataStore } from '@/stores/dataStore';\n\n  // ═══════════════════════════════════════════════════════════════════════════\n  // 🎯 組件定義 (Component Definition)\n  // ═══════════════════════════════════════════════════════════════════════════\n\n  export default {\n    name: 'MapTab',\n\n    // 組件觸發的事件\n    emits: [\n      'map-ready', // 地圖初始化完成時觸發，傳遞地圖實例\n    ],\n\n    /**\n     * ───────────────────────────────────────────────────────────────────────\n     * 🎬 組件設置函數 (Component Setup Function)\n     * ───────────────────────────────────────────────────────────────────────\n     * 使用 Vue 3 Composition API 設置組件邏輯\n     *\n     * @param {Object} _ - Props（本組件不使用）\n     * @param {Object} context - 設置上下文\n     * @param {Function} context.emit - 事件觸發函數\n     * @returns {Object} 返回模板可用的響應式數據和方法\n     */\n    setup(_, { emit }) {\n      // ═══════════════════════════════════════════════════════════════════════\n      // 📦 狀態管理與依賴 (State Management & Dependencies)\n      // ═══════════════════════════════════════════════════════════════════════\n\n      // Pinia 數據存儲（保留供未來擴展使用）\n      // eslint-disable-next-line no-unused-vars\n      const dataStore = useDataStore();\n\n      // ═══════════════════════════════════════════════════════════════════════\n      // 🗺️ 地圖相關變數 (Map-Related Variables)\n      // ═══════════════════════════════════════════════════════════════════════\n\n      /**\n       * 地圖 DOM 容器引用\n       * @type {Ref<HTMLElement|null>}\n       */\n      const mapContainer = ref(null);\n\n      /**\n       * D3.js SVG 元素\n       * @type {d3.Selection|null}\n       */\n      let svg = null;\n\n      /**\n       * D3.js 投影函數\n       * @type {d3.GeoProjection|null}\n       */\n      let projection = null;\n\n      /**\n       * D3.js 路徑生成器\n       * @type {d3.GeoPath|null}\n       */\n      let path = null;\n\n      /**\n       * D3.js 縮放行為\n       * @type {d3.ZoomBehavior|null}\n       */\n      let zoom = null;\n\n      /**\n       * SVG 主容器組\n       * @type {d3.Selection|null}\n       */\n      let g = null;\n\n      /**\n       * 工具提示元素\n       * @type {HTMLElement|null}\n       */\n      let tooltip = null;\n\n      // ═══════════════════════════════════════════════════════════════════════\n      // 🎛️ 控制狀態 (Control States)\n      // ═══════════════════════════════════════════════════════════════════════\n\n      /**\n       * 地圖就緒狀態標記\n       * true = 地圖已初始化完成，false = 尚未初始化\n       * @type {Ref<boolean>}\n       */\n      const isMapReady = ref(false);\n\n      /**\n       * 地圖容器唯一 ID\n       * 使用隨機字符串確保多實例時不會衝突\n       * @type {Ref<string>}\n       */\n      const mapContainerId = ref(`leaflet-map-${Math.random().toString(36).substr(2, 9)}`);\n\n      /**\n       * 顯示模式\n       * 'map' = 使用地圖投影顯示（目前結果）\n       * 'grid' = 直接使用 grid_x, grid_y 繪製網格\n       * @type {Ref<string>}\n       */\n      const displayMode = ref('map');\n\n      // ═══════════════════════════════════════════════════════════════════════\n      // 📊 GeoJSON 數據儲存 (GeoJSON Data Storage)\n      // ═══════════════════════════════════════════════════════════════════════\n\n      /**\n       * 區界 GeoJSON 數據（臺北市）\n       * 來源：臺北市區界圖_20220915.geojson\n       * @type {Ref<Object|null>}\n       */\n      const countyData = ref(null);\n\n      /**\n       * 網格 GeoJSON 數據（臺北市 500m 方格）\n       * 來源：grid_with_weighted_angle_stats_500m.geojson\n       * @type {Ref<Object|null>}\n       */\n      const hexData = ref(null);\n\n      /**\n       * 登革熱網格 GeoJSON 數據（保留以兼容）\n       * 來源：dengue_grid_counts_1km_2023_land_only.geojson\n       * @type {Ref<Object|null>}\n       */\n      const dengueData = ref(null);\n\n      /**\n       * 📥 載入直轄市、縣(市)界線 GeoJSON 數據\n       */\n      const loadCountyData = async () => {\n        try {\n          console.log('[MapTab] 開始載入直轄市、縣(市)界線 GeoJSON 數據...');\n\n          // 載入臺北市區界 GeoJSON 檔案\n          const countyResponse = await fetch(\n            `${process.env.BASE_URL}data/geojson/臺北市區界圖_20220915.geojson`\n          );\n\n          // 檢查響應\n          if (!countyResponse.ok) {\n            throw new Error(`直轄市、縣(市)界線數據載入失敗: HTTP ${countyResponse.status}`);\n          }\n\n          // 解析 JSON\n          countyData.value = await countyResponse.json();\n\n          console.log('[MapTab] 臺北市區界數據載入成功');\n          console.log('  - 區數量:', countyData.value.features?.length || 0);\n\n          return true;\n        } catch (error) {\n          console.error('[MapTab] 直轄市、縣(市)界線數據載入失敗:', error);\n          return false;\n        }\n      };\n\n      /**\n       * 🛠️ 創建工具提示元素\n       */\n      const createTooltip = () => {\n        if (!mapContainer.value) return;\n\n        // 移除已存在的工具提示\n        const existingTooltip = mapContainer.value.querySelector('.map-tooltip');\n        if (existingTooltip) {\n          existingTooltip.remove();\n        }\n\n        // 創建新的工具提示元素\n        tooltip = document.createElement('div');\n        tooltip.className = 'map-tooltip';\n        tooltip.style.position = 'absolute';\n        tooltip.style.pointerEvents = 'none';\n        tooltip.style.opacity = '0';\n        tooltip.style.padding = '4px 8px';\n\n        mapContainer.value.appendChild(tooltip);\n        console.log('[MapTab] 工具提示元素創建成功');\n      };\n\n      /**\n       * 📥 載入網格 GeoJSON 數據\n       */\n      const loadHexData = async () => {\n        try {\n          console.log('[MapTab] 開始載入 500m 方格 GeoJSON 數據...');\n\n          // 載入臺北市 500m 方格 GeoJSON 檔案\n          const hexResponse = await fetch(\n            `${process.env.BASE_URL}data/geojson/grid_with_weighted_angle_stats_500m.geojson`\n          );\n\n          // 檢查響應\n          if (!hexResponse.ok) {\n            throw new Error(`方格數據載入失敗: HTTP ${hexResponse.status}`);\n          }\n\n          // 解析 JSON\n          hexData.value = await hexResponse.json();\n\n          console.log('[MapTab] 500m 方格數據載入成功');\n          console.log('  - 網格數量:', hexData.value.features?.length || 0);\n\n          return true;\n        } catch (error) {\n          console.error('[MapTab] 500m 方格數據載入失敗:', error);\n          return false;\n        }\n      };\n\n      /**\n       * 📥 載入登革熱網格 GeoJSON 數據\n       */\n      // eslint-disable-next-line no-unused-vars\n      const loadDengueData = async () => {\n        try {\n          console.log('[MapTab] 開始載入登革熱網格 GeoJSON 數據...');\n\n          // 載入登革熱網格 GeoJSON 檔案\n          const dengueResponse = await fetch(\n            `${process.env.BASE_URL}data/geojson/dengue_grid_counts_1km_2023_land_only.geojson`\n          );\n\n          // 檢查響應\n          if (!dengueResponse.ok) {\n            throw new Error(`登革熱網格數據載入失敗: HTTP ${dengueResponse.status}`);\n          }\n\n          // 解析 JSON\n          dengueData.value = await dengueResponse.json();\n\n          console.log('[MapTab] 登革熱網格數據載入成功');\n          console.log('  - 網格數量:', dengueData.value.features?.length || 0);\n\n          return true;\n        } catch (error) {\n          console.error('[MapTab] 登革熱網格數據載入失敗:', error);\n          return false;\n        }\n      };\n\n      /**\n       * 📊 Jenks Natural Breaks 分類函數\n       * @param {Array} data - 數據陣列\n       * @param {number} nClasses - 分類數量\n       * @returns {Array} 分類閾值陣列\n       */\n      // eslint-disable-next-line no-unused-vars\n      const jenksNaturalBreaks = (data, nClasses) => {\n        if (!data || data.length === 0) return [];\n\n        const sortedData = [...data].sort((a, b) => a - b);\n        const dataLength = sortedData.length;\n\n        // 如果要分類數大於數據點數，返回數據點數\n        if (nClasses > dataLength) {\n          nClasses = dataLength;\n        }\n\n        // 初始化矩陣\n        const matrix = [];\n        for (let i = 0; i < dataLength + 1; i++) {\n          matrix[i] = [];\n          for (let j = 0; j < nClasses + 1; j++) {\n            matrix[i][j] = 0;\n          }\n        }\n\n        // 計算下三角矩陣（方差）\n        const lowerClassLimit = [];\n        for (let i = 0; i < dataLength + 1; i++) {\n          lowerClassLimit[i] = [];\n          for (let j = 0; j < nClasses + 1; j++) {\n            lowerClassLimit[i][j] = 0;\n          }\n        }\n\n        let variance = 0;\n\n        // 計算方差\n        for (let i = 1; i < nClasses + 1; i++) {\n          matrix[0][i] = 1;\n          lowerClassLimit[0][i] = 0;\n          for (let j = 1; j < dataLength + 1; j++) {\n            matrix[j][i] = Infinity;\n          }\n        }\n\n        for (let l = 0; l < dataLength; l++) {\n          let sum = 0;\n          let sumSquares = 0;\n          let w = 0;\n\n          for (let m = 0; m < l + 1; m++) {\n            const lowerClassLimitIndex = l - m + 1;\n            const val = sortedData[lowerClassLimitIndex - 1];\n            w++;\n            sum += val;\n            sumSquares += val * val;\n            variance = sumSquares - (sum * sum) / w;\n            const i4 = lowerClassLimitIndex - 1;\n\n            if (i4 !== 0) {\n              for (let j = 2; j < nClasses + 1; j++) {\n                if (matrix[l][j] >= variance + matrix[i4][j - 1]) {\n                  lowerClassLimit[l][j] = lowerClassLimitIndex;\n                  matrix[l][j] = variance + matrix[i4][j - 1];\n                }\n              }\n            }\n          }\n\n          lowerClassLimit[l][1] = 1;\n          matrix[l][1] = variance;\n        }\n\n        // 提取分類閾值\n        const classMarkers = [];\n        let k = dataLength;\n        for (let j = nClasses; j > 0; j--) {\n          const id = lowerClassLimit[k][j] - 2;\n          classMarkers[j - 1] = sortedData[id + 1];\n          k = lowerClassLimit[k][j] - 1;\n        }\n\n        return classMarkers;\n      };\n\n      /**\n       * 🗺️ 繪製直轄市、縣(市)界線\n       */\n      const drawCounties = () => {\n        if (!g || !countyData.value) {\n          console.error(\n            '[MapTab] 無法繪製直轄市、縣(市)界線: g=',\n            !!g,\n            'countyData=',\n            !!countyData.value\n          );\n          return;\n        }\n\n        try {\n          console.log('[MapTab] 開始繪製直轄市、縣(市)界線 GeoJSON');\n\n          // 繪製所有行政區（臺北市）\n          g.selectAll('.county')\n            .data(countyData.value.features)\n            .enter()\n            .append('path')\n            .attr('d', path)\n            .attr('class', 'county')\n            .attr('fill', 'none')\n            .attr('stroke', '#222')\n            .attr('stroke-width', 1.2)\n            .attr('stroke-opacity', 0.9)\n            .attr('vector-effect', 'non-scaling-stroke');\n\n          console.log('[MapTab] 直轄市、縣(市)界線 GeoJSON 繪製完成');\n        } catch (error) {\n          console.error('[MapTab] 直轄市、縣(市)界線 GeoJSON 繪製失敗:', error);\n        }\n      };\n\n      /**\n       * 🏗️ 創建網格畫布（不依賴地圖投影）\n       * 用於 grid 模式，直接使用 grid_x, grid_y 繪製\n       */\n      // eslint-disable-next-line no-unused-vars\n      const createGridCanvas = () => {\n        if (!mapContainer.value) return false;\n\n        const rect = mapContainer.value.getBoundingClientRect();\n        if (rect.width === 0 || rect.height === 0) {\n          console.warn('[MapTab] 容器尺寸為零，延遲初始化');\n          return false;\n        }\n\n        try {\n          // 清除舊的 SVG\n          if (svg) {\n            svg.remove();\n          }\n\n          const width = rect.width;\n          const height = rect.height;\n\n          // 創建 SVG 元素（不帶地圖投影）\n          svg = d3\n            .select(mapContainer.value)\n            .append('svg')\n            .attr('width', width)\n            .attr('height', height)\n            .style('background', '#ffffff'); // 白色背景\n\n          // 創建容器組（不使用地圖投影）\n          g = svg.append('g');\n\n          // 設置縮放行為（用於網格縮放）\n          zoom = d3\n            .zoom()\n            .scaleExtent([0.5, 50]) // 允許縮放 0.5x 到 50x\n            .on('zoom', (event) => {\n              g.attr('transform', event.transform);\n            });\n\n          svg.call(zoom);\n\n          // 重置縮放狀態，確保切換模式時不會受到之前模式的影響\n          svg.call(zoom.transform, d3.zoomIdentity);\n\n          // 創建工具提示元素\n          createTooltip();\n\n          isMapReady.value = true;\n\n          console.log('[MapTab] 網格畫布創建成功');\n          return true;\n        } catch (error) {\n          console.error('[MapTab] 網格畫布創建失敗:', error);\n          return false;\n        }\n      };\n\n      /**\n       * 🗺️ 繪製六角形網格（Grid 模式版本）\n       * 使用地圖投影，但沒有縣市界線\n       */\n      const drawHexGridOnly = () => {\n        if (!g || !hexData.value || !path) {\n          console.error(\n            '[MapTab] 無法繪製方格: g=',\n            !!g,\n            'hexData=',\n            !!hexData.value,\n            'path=',\n            !!path\n          );\n          return;\n        }\n\n        try {\n          console.log('[MapTab] 開始繪製方格（Grid 模式）');\n\n          // 先清除舊的圖層（包括縣市界線）\n          g.selectAll('.hex-grid').remove();\n          g.selectAll('.county').remove();\n          // 直接繪製所有網格（無分類、無填色）\n          const hexPaths = g\n            .selectAll('.hex-grid')\n            .data(hexData.value.features)\n            .enter()\n            .append('path')\n            .attr('d', path)\n            .attr('class', 'hex-grid')\n            .attr('fill', 'none')\n            .attr('stroke', '#999')\n            .attr('stroke-width', 0.5)\n            .attr('stroke-opacity', 0.7)\n            .attr('shape-rendering', 'crispEdges')\n            .attr('vector-effect', 'non-scaling-stroke')\n            .style('cursor', 'pointer');\n\n          console.log('[DEBUG] Grid 模式 - 繪製了多少個 path 元素:', hexPaths.size());\n\n          hexPaths\n            .on('mouseover', function (event, d) {\n              d3.select(this).attr('stroke-width', 0.9).attr('stroke-opacity', 1);\n              if (tooltip) {\n                const properties = d.properties;\n                // 顯示所有 properties 欄位\n                let tooltipHTML = '';\n                Object.keys(properties).forEach((key) => {\n                  const value = properties[key];\n                  tooltipHTML += `<div><strong>${key}:</strong> ${value !== null && value !== undefined ? value : 'N/A'}</div>`;\n                });\n                tooltip.innerHTML = tooltipHTML;\n                const [mouseX, mouseY] = d3.pointer(event, mapContainer.value);\n                tooltip.style.left = mouseX + 10 + 'px';\n                tooltip.style.top = mouseY - 10 + 'px';\n                tooltip.style.opacity = 1;\n              }\n            })\n            .on('mousemove', function (event) {\n              if (tooltip) {\n                const [mouseX, mouseY] = d3.pointer(event, mapContainer.value);\n                tooltip.style.left = mouseX + 10 + 'px';\n                tooltip.style.top = mouseY - 10 + 'px';\n              }\n            })\n            .on('mouseout', function () {\n              d3.select(this).attr('stroke-width', 0.5).attr('stroke-opacity', 0.7);\n              if (tooltip) {\n                tooltip.style.opacity = 0;\n              }\n            });\n\n          console.log('[MapTab] 方格（Grid 模式）繪製完成');\n          // 在每個方格中心繪製借車/還車角度箭頭\n          drawAngleArrows();\n        } catch (error) {\n          console.error('[MapTab] 方格繪製失敗:', error);\n        }\n      };\n\n      /**\n       * 🗺️ 繪製網格（使用 grid_x, grid_y，不使用座標）\n       * 完全獨立的實現，不依賴地圖投影\n       */\n      // eslint-disable-next-line no-unused-vars\n      const drawGridOnly = () => {\n        if (!g || !dengueData.value) {\n          console.error('[MapTab] 無法繪製網格: g=', !!g, 'dengueData=', !!dengueData.value);\n          return;\n        }\n\n        try {\n          console.log('[MapTab] 開始繪製網格（使用 grid_x, grid_y）');\n\n          // 清除舊的網格\n          g.selectAll('.dengue-grid').remove();\n\n          // 顏色映射\n          const levelColors = {\n            0: '#e0e0e0', // 淡灰色（level 0）\n            1: '#1a237e', // 深藍色（深色）\n            2: '#4caf50', // 綠色（較亮）\n            3: '#fbc02d', // 黃橙色（金色）\n            4: '#ff6f00', // 橙色（明亮）\n            5: '#d32f2f', // 紅色（深色）\n          };\n\n          // 顏色映射函數\n          const getColorByLevel = (level) => {\n            if (level === 0 || level === null || level === undefined) {\n              return levelColors[0];\n            }\n            return levelColors[level] || levelColors[1];\n          };\n\n          // 透明度映射函數\n          const getOpacityByLevel = (level) => {\n            const levelNum = level || 0;\n            const opacityMap = {\n              0: 0.5,\n              1: 0.7,\n              2: 0.75,\n              3: 0.8,\n              4: 0.85,\n              5: 0.9,\n            };\n            return opacityMap[levelNum] || opacityMap[0];\n          };\n\n          // 過濾有 grid_x 和 grid_y 的數據\n          const gridsWithXY = dengueData.value.features.filter(\n            (d) =>\n              d.properties.grid_x !== null &&\n              d.properties.grid_x !== undefined &&\n              d.properties.grid_y !== null &&\n              d.properties.grid_y !== undefined\n          );\n\n          if (gridsWithXY.length === 0) {\n            console.error('[MapTab] 無法找到 grid_x 或 grid_y 屬性');\n            return;\n          }\n\n          // 計算 grid_x 和 grid_y 的範圍\n          const gridXValues = gridsWithXY.map((d) => d.properties.grid_x);\n          const gridYValues = gridsWithXY.map((d) => d.properties.grid_y);\n\n          const minX = d3.min(gridXValues);\n          const maxX = d3.max(gridXValues);\n          const minY = d3.min(gridYValues);\n          const maxY = d3.max(gridYValues);\n\n          console.log('[MapTab] Grid 範圍:', { minX, maxX, minY, maxY });\n\n          // 獲取 SVG 尺寸（在 svg 尚未建立時回退到容器尺寸）\n          const svgWidth =\n            (svg ? +svg.attr('width') : null) || mapContainer.value.getBoundingClientRect().width;\n          const svgHeight =\n            (svg ? +svg.attr('height') : null) || mapContainer.value.getBoundingClientRect().height;\n\n          // 創建比例尺（帶有一些邊距）\n          const padding = 50;\n          const availableWidth = svgWidth - 2 * padding;\n          const availableHeight = svgHeight - 2 * padding;\n\n          // 計算 grid 範圍（包括邊界）\n          const rangeX = maxX - minX + 1;\n          const rangeY = maxY - minY + 1;\n\n          // 計算理論單元大小（根據可用空間和範圍）\n          const cellWidthFromX = availableWidth / rangeX;\n          const cellHeightFromY = availableHeight / rangeY;\n\n          // 使用較小的值作為統一的單元大小，確保所有網格都是正方形且能完整顯示\n          const cellSize = Math.min(cellWidthFromX, cellHeightFromY);\n\n          // 根據實際單元大小計算實際使用的空間\n          const actualWidth = cellSize * rangeX;\n          const actualHeight = cellSize * rangeY;\n\n          // 計算居中偏移量\n          const offsetX = (svgWidth - actualWidth) / 2;\n          const offsetY = (svgHeight - actualHeight) / 2;\n\n          // 創建比例尺（使用統一的單元大小，並居中顯示）\n          const scaleX = d3\n            .scaleLinear()\n            .domain([minX, maxX + 1])\n            .range([offsetX, offsetX + actualWidth]);\n          // Y 軸：grid_y 最小值在上方，最大值在下方（SVG 坐標系：y=0 在頂部，向下遞增）\n          const scaleY = d3\n            .scaleLinear()\n            .domain([minY, maxY + 1])\n            .range([offsetY, offsetY + actualHeight]);\n\n          console.log('[MapTab] Grid 單元大小:', {\n            cellSize,\n            rangeX,\n            rangeY,\n            cellWidthFromX,\n            cellHeightFromY,\n          });\n\n          // 網格單元大小（統一為正方形）\n          const cellWidth = cellSize;\n          const cellHeight = cellSize;\n\n          // 按 level 排序：level 0 在底層，level 1-5 在上層\n          const sortedGrids = gridsWithXY.sort((a, b) => {\n            const levelA = a.properties.level || 0;\n            const levelB = b.properties.level || 0;\n            return levelA - levelB;\n          });\n\n          // 繪製網格矩形\n          g.selectAll('.dengue-grid')\n            .data(sortedGrids)\n            .enter()\n            .append('rect')\n            .attr('class', 'dengue-grid')\n            .attr('x', (d) => scaleX(d.properties.grid_x))\n            .attr('y', (d) => scaleY(d.properties.grid_y))\n            .attr('width', cellWidth)\n            .attr('height', cellHeight)\n            .attr('fill', (d) => getColorByLevel(d.properties.level))\n            .attr('fill-opacity', (d) => getOpacityByLevel(d.properties.level))\n            .attr('stroke', 'none')\n            .style('cursor', 'pointer')\n            .on('mouseover', function (event, d) {\n              d3.select(this).attr('fill-opacity', 1);\n              if (tooltip) {\n                const properties = d.properties;\n                // 顯示所有 properties 欄位\n                let tooltipHTML = '';\n                Object.keys(properties).forEach((key) => {\n                  const value = properties[key];\n                  tooltipHTML += `<div><strong>${key}:</strong> ${value !== null && value !== undefined ? value : 'N/A'}</div>`;\n                });\n                tooltip.innerHTML = tooltipHTML;\n                const [mouseX, mouseY] = d3.pointer(event, mapContainer.value);\n                tooltip.style.left = mouseX + 10 + 'px';\n                tooltip.style.top = mouseY - 10 + 'px';\n                tooltip.style.opacity = 1;\n              }\n            })\n            .on('mousemove', function (event) {\n              if (tooltip) {\n                const [mouseX, mouseY] = d3.pointer(event, mapContainer.value);\n                tooltip.style.left = mouseX + 10 + 'px';\n                tooltip.style.top = mouseY - 10 + 'px';\n              }\n            })\n            .on('mouseout', function (event, d) {\n              const level = d.properties.level || 0;\n              d3.select(this).attr('fill-opacity', getOpacityByLevel(level));\n              if (tooltip) {\n                tooltip.style.opacity = 0;\n              }\n            });\n\n          console.log('[MapTab] 網格繪製完成');\n          console.log('  - 網格數量:', sortedGrids.length);\n        } catch (error) {\n          console.error('[MapTab] 網格繪製失敗:', error);\n        }\n      };\n\n      /**\n       * 🎛️ 切換顯示模式\n       * @param {string} mode - 'map' 或 'grid'\n       */\n      const toggleDisplayMode = async (mode) => {\n        displayMode.value = mode;\n        console.log('[MapTab] 切換顯示模式:', mode);\n\n        if (displayMode.value === 'map') {\n          // 地圖模式：需要地圖投影，載入縣市界線和六角形網格\n          if (!countyData.value) {\n            await loadCountyData();\n          }\n          if (!hexData.value) {\n            await loadHexData();\n          }\n\n          // 清除舊的 SVG（如果從其他模式切換過來）\n          if (svg && !projection) {\n            svg.remove();\n            svg = null;\n          }\n\n          if (!projection || !path) {\n            // 如果還沒有創建地圖，先創建\n            const rect = mapContainer.value.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              const width = rect.width;\n              const height = rect.height;\n\n              // 清除舊的 SVG\n              if (svg) {\n                svg.remove();\n              }\n\n              // 創建 SVG 和地圖投影\n              svg = d3\n                .select(mapContainer.value)\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .style('background', '#ffffff');\n\n              projection = d3.geoMercator();\n              if (countyData.value) {\n                projection.fitExtent(\n                  [\n                    [20, 20],\n                    [width - 20, height - 20],\n                  ],\n                  countyData.value\n                );\n              } else {\n                projection\n                  .center([121, 25.05])\n                  .scale(45000)\n                  .translate([width / 2, height / 2]);\n              }\n\n              path = d3.geoPath().projection(projection);\n              g = svg.append('g');\n\n              zoom = d3\n                .zoom()\n                .scaleExtent([0.8, 12])\n                .on('zoom', (event) => {\n                  g.attr('transform', event.transform);\n                });\n\n              svg.call(zoom);\n\n              // 重置縮放狀態，確保切換模式時不會受到之前模式的影響\n              svg.call(zoom.transform, d3.zoomIdentity);\n\n              createTooltip();\n              isMapReady.value = true;\n            }\n          } else {\n            // 如果已經創建了地圖，重置縮放狀態\n            if (svg && zoom) {\n              svg.call(zoom.transform, d3.zoomIdentity);\n            }\n          }\n          // 繪製縣市界線和六角形網格\n          drawCounties();\n          drawHexGrid();\n        } else {\n          // Grid 模式：載入六角形網格數據，需要地圖投影來繪製\n          if (!hexData.value) {\n            await loadHexData();\n          }\n          // 清除縣市界線數據（不需要）\n          countyData.value = null;\n\n          // 清除舊的 SVG（如果從地圖模式切換過來）\n          if (svg && !projection) {\n            svg.remove();\n            svg = null;\n          }\n\n          if (!projection || !path) {\n            // 如果還沒有創建地圖，先創建\n            const rect = mapContainer.value.getBoundingClientRect();\n            if (rect.width > 0 && rect.height > 0) {\n              const width = rect.width;\n              const height = rect.height;\n\n              // 清除舊的 SVG\n              if (svg) {\n                svg.remove();\n              }\n\n              // 創建 SVG 和地圖投影（Grid 模式也需要投影來繪製六角形）\n              svg = d3\n                .select(mapContainer.value)\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height)\n                .style('background', '#ffffff');\n\n              projection = d3.geoMercator();\n              if (countyData.value) {\n                projection.fitExtent(\n                  [\n                    [20, 20],\n                    [width - 20, height - 20],\n                  ],\n                  countyData.value\n                );\n              } else {\n                projection\n                  .center([121, 25.05])\n                  .scale(45000)\n                  .translate([width / 2, height / 2]);\n              }\n\n              path = d3.geoPath().projection(projection);\n              g = svg.append('g');\n\n              zoom = d3\n                .zoom()\n                .scaleExtent([0.8, 12])\n                .on('zoom', (event) => {\n                  g.attr('transform', event.transform);\n                });\n\n              svg.call(zoom);\n\n              // 重置縮放狀態\n              svg.call(zoom.transform, d3.zoomIdentity);\n\n              createTooltip();\n              isMapReady.value = true;\n            }\n          } else {\n            // 如果已經創建了地圖，重置縮放狀態\n            if (svg && zoom) {\n              svg.call(zoom.transform, d3.zoomIdentity);\n            }\n          }\n\n          // 繪製六角形網格（Grid 模式，不顯示縣市界線）\n          drawHexGridOnly();\n        }\n      };\n\n      /**\n       * 🗺️ 繪製六角形網格（使用大陸地區人民核准定居數據）\n       */\n      const drawHexGrid = () => {\n        if (!g || !hexData.value || !path) {\n          console.error(\n            '[MapTab] 無法繪製方格: g=',\n            !!g,\n            'hexData=',\n            !!hexData.value,\n            'path=',\n            !!path\n          );\n          return;\n        }\n\n        try {\n          console.log('[MapTab] 開始繪製方格 GeoJSON');\n\n          // 先清除舊的圖層\n          g.selectAll('.hex-grid').remove();\n          // Map 模式：使用地圖投影繪製（使用 GeoJSON coordinates）\n          console.log('[MapTab] 使用 Map 模式繪製（地圖投影）');\n          console.log('[MapTab] path generator:', !!path, 'g:', !!g);\n\n          // 直接繪製所有網格（無分類、無填色）\n          const hexPaths = g\n            .selectAll('.hex-grid')\n            .data(hexData.value.features)\n            .enter()\n            .append('path')\n            .attr('d', path)\n            .attr('class', 'hex-grid')\n            .attr('fill', 'none')\n            .attr('stroke', '#999')\n            .attr('stroke-width', 0.5)\n            .attr('stroke-opacity', 0.7)\n            .attr('shape-rendering', 'crispEdges')\n            .attr('vector-effect', 'non-scaling-stroke')\n            .style('cursor', 'pointer');\n\n          console.log('[DEBUG] 繪製了多少個 path 元素:', hexPaths.size());\n\n          hexPaths\n            .on('mouseover', function (event, d) {\n              d3.select(this).attr('fill-opacity', 1).attr('stroke-width', 2);\n              if (tooltip) {\n                const properties = d.properties;\n                // 顯示所有 properties 欄位\n                let tooltipHTML = '';\n                Object.keys(properties).forEach((key) => {\n                  const value = properties[key];\n                  tooltipHTML += `<div><strong>${key}:</strong> ${value !== null && value !== undefined ? value : 'N/A'}</div>`;\n                });\n                tooltip.innerHTML = tooltipHTML;\n                const [mouseX, mouseY] = d3.pointer(event, mapContainer.value);\n                tooltip.style.left = mouseX + 10 + 'px';\n                tooltip.style.top = mouseY - 10 + 'px';\n                tooltip.style.opacity = 1;\n              }\n            })\n            .on('mousemove', function (event) {\n              if (tooltip) {\n                const [mouseX, mouseY] = d3.pointer(event, mapContainer.value);\n                tooltip.style.left = mouseX + 10 + 'px';\n                tooltip.style.top = mouseY - 10 + 'px';\n              }\n            })\n            .on('mouseout', function () {\n              d3.select(this).attr('fill-opacity', 0.8).attr('stroke-width', 0.5);\n              if (tooltip) {\n                tooltip.style.opacity = 0;\n              }\n            });\n\n          console.log('[MapTab] 方格（地圖模式）繪製完成');\n          console.log('  - SVG 中的 path 元素數量:', g.selectAll('path').size());\n          console.log('  - hex-grid class 元素數量:', g.selectAll('.hex-grid').size());\n\n          // 在每個方格中心繪製借車/還車角度箭頭\n          drawAngleArrows();\n        } catch (error) {\n          console.error('[MapTab] 方格繪製失敗:', error);\n        }\n      };\n\n      // （已移除）原本用於除錯的紅點顯示函數 drawGridCentroids\n\n      // 已移除：原 SVG marker 箭頭尖端\n\n      /**\n       * 🧭 在每個網格的中心畫出借車/還車角度的箭頭\n       * - 借車：藍色 '#1a237e'，使用 marker 'arrow-borrow'\n       * - 還車：紅色 '#d32f2f'，使用 marker 'arrow-return'\n       */\n      const drawAngleArrows = () => {\n        if (!g || !hexData.value || !path) return;\n\n        // 先清除舊的箭頭\n        g.selectAll('.angle-arrows').remove();\n\n        const arrowsGroup = g\n          .append('g')\n          .attr('class', 'angle-arrows')\n          .attr('pointer-events', 'none');\n\n        // 確保箭頭圖層在最上層\n        if (arrowsGroup.raise) arrowsGroup.raise();\n\n        const features = hexData.value.features || [];\n\n        // 箭頭長度（縮小一半），兩支箭頭共用同一個原點（不做側向偏移）\n        const arrowLength = 8;\n        const offsetDistance = 0;\n\n        let validBorrow = 0;\n        let validReturn = 0;\n        let sampleCentroids = [];\n\n        features.forEach((feature, idx) => {\n          const borrowDeg = feature.properties?.['借車角度平均'];\n          const returnDeg = feature.properties?.['還車角度平均'];\n\n          // 使用 d3.polygonCentroid 計算多邊形中心\n          let cx, cy;\n          try {\n            if (\n              feature.geometry &&\n              feature.geometry.coordinates &&\n              feature.geometry.coordinates[0]\n            ) {\n              const coords = feature.geometry.coordinates[0];\n              const polygon = coords.map((coord) => [coord[0], coord[1]]);\n              const centroid = d3.polygonCentroid(polygon);\n              const projected = projection(centroid);\n              cx = projected[0];\n              cy = projected[1];\n            } else {\n              // 備用方案：使用 path.centroid\n              [cx, cy] = path.centroid(feature);\n            }\n          } catch (e) {\n            console.warn('Centroid calculation failed:', e);\n            return;\n          }\n\n          if (!Number.isFinite(cx) || !Number.isFinite(cy)) {\n            return;\n          }\n\n          // 記錄前幾個 centroid 位置用於調試\n          if (idx < 5 && (borrowDeg || returnDeg)) {\n            sampleCentroids.push({ cx, cy, borrowDeg, returnDeg });\n          }\n\n          // 不渲染圓心輔助點（需求完成後移除）\n\n          const drawOneArrow = (deg, color, markerId, offsetSign, pointToCenter = false) => {\n            if (deg === null || deg === undefined || Number.isNaN(deg)) return;\n            // 以指南針角度為準：正上方=0°，順時針增加\n            const rad = ((deg - 90) * Math.PI) / 180;\n            const dx = Math.cos(rad) * arrowLength;\n            const dy = Math.sin(rad) * arrowLength;\n\n            // 與方向垂直的偏移，讓兩支箭頭不重疊\n            const ox = -Math.sin(rad) * offsetDistance * offsetSign;\n            const oy = Math.cos(rad) * offsetDistance * offsetSign;\n\n            const x1 = pointToCenter ? cx + ox - dx : cx + ox;\n            const y1 = pointToCenter ? cy + oy - dy : cy + oy;\n            const x2 = pointToCenter ? cx + ox : cx + ox + dx;\n            const y2 = pointToCenter ? cy + oy : cy + oy + dy;\n\n            arrowsGroup\n              .append('line')\n              .attr('x1', x1)\n              .attr('y1', y1)\n              .attr('x2', x2)\n              .attr('y2', y2)\n              .attr('stroke', color)\n              .attr('stroke-width', 1.5)\n              .attr('stroke-linecap', 'butt')\n              .attr('stroke-opacity', 0.95)\n              .attr('class', 'angle-arrow');\n          };\n\n          // 借車角度箭頭（藍）在一側偏移\n          const beforeB = arrowsGroup.selectAll('.angle-arrow').size();\n          // 借車：箭頭由中心朝外（忽略 null/NaN）\n          if (borrowDeg !== null && borrowDeg !== undefined && !Number.isNaN(borrowDeg)) {\n            drawOneArrow(borrowDeg, 'var(--map-arrow-borrow)', 'arrow-borrow', 1, false);\n          }\n          const afterB = arrowsGroup.selectAll('.angle-arrow').size();\n          if (afterB > beforeB) validBorrow++;\n\n          // 還車角度箭頭（紅）在另一側偏移\n          const beforeR = arrowsGroup.selectAll('.angle-arrow').size();\n          // 還車：箭頭由外朝中心（箭頭尖端在中心），角度先加 180°（忽略 null/NaN）\n          if (returnDeg !== null && returnDeg !== undefined && !Number.isNaN(returnDeg)) {\n            drawOneArrow(returnDeg + 180, 'var(--map-arrow-return)', 'arrow-return', -1, true);\n          }\n          const afterR = arrowsGroup.selectAll('.angle-arrow').size();\n          if (afterR > beforeR) validReturn++;\n        });\n\n        let bbox = null;\n        try {\n          bbox = arrowsGroup.node()?.getBBox?.();\n        } catch (e) {\n          bbox = null;\n        }\n\n        // 將箭頭圖層再次置頂\n        if (arrowsGroup.raise) arrowsGroup.raise();\n\n        console.log('[MapTab] 角度箭頭繪製完成', {\n          features: features.length,\n          validBorrow,\n          validReturn,\n          totalArrows: arrowsGroup.selectAll('.angle-arrow').size(),\n          bbox,\n          sampleCentroids,\n        });\n      };\n\n      // 圖例功能已移除（不再進行分類著色）\n\n      /**\n       * 🏗️ 創建地圖實例\n       * 初始化 D3.js 地圖並設定基本配置\n       */\n      const createMap = (fitFeature = null) => {\n        if (!mapContainer.value) return false;\n\n        const rect = mapContainer.value.getBoundingClientRect();\n        if (rect.width === 0 || rect.height === 0) {\n          console.warn('[MapTab] 容器尺寸為零，延遲初始化');\n          return false;\n        }\n\n        try {\n          const width = rect.width;\n          const height = rect.height;\n\n          // 台灣中心位置：緯度 23.5°, 經度 121°\n\n          // 創建 SVG 元素\n          svg = d3\n            .select(mapContainer.value)\n            .append('svg')\n            .attr('width', width)\n            .attr('height', height)\n            .style('background', '#ffffff'); // 白色背景\n\n          // 創建投影 - 若有資料則自動貼齊區界（含 20px 邊距）\n          projection = d3.geoMercator();\n          if (fitFeature) {\n            projection.fitExtent(\n              [\n                [20, 20],\n                [width - 20, height - 20],\n              ],\n              fitFeature\n            );\n          } else {\n            projection\n              .center([121, 25.05])\n              .scale(45000)\n              .translate([width / 2, height / 2]);\n          }\n\n          // 創建路徑生成器\n          path = d3.geoPath().projection(projection);\n\n          // 創建容器組\n          g = svg.append('g');\n\n          // 設置縮放行為\n          zoom = d3\n            .zoom()\n            .scaleExtent([0.8, 12])\n            .on('zoom', (event) => {\n              g.attr('transform', event.transform);\n            });\n\n          svg.call(zoom);\n\n          // 重置縮放狀態，確保切換模式時不會受到之前模式的影響\n          svg.call(zoom.transform, d3.zoomIdentity);\n\n          // 創建工具提示元素\n          createTooltip();\n\n          isMapReady.value = true;\n\n          // 將地圖實例傳遞給父組件\n          emit('map-ready', { svg, projection, path });\n\n          console.log('[MapTab] D3.js 地圖創建成功');\n          return true;\n        } catch (error) {\n          console.error('[MapTab] D3.js 地圖創建失敗:', error);\n          return false;\n        }\n      };\n\n      /**\n       * 🚀 初始化地圖\n       * 根據初始顯示模式創建對應的視圖\n       */\n      const initMap = async () => {\n        let attempts = 0;\n        const maxAttempts = 20;\n\n        // 根據顯示模式載入不同的數據\n        if (displayMode.value === 'map') {\n          // 地圖模式：需要載入縣市界線和六角形網格數據\n          console.log('[MapTab] 開始載入地圖模式數據...');\n          const [countyLoaded, hexLoaded] = await Promise.all([loadCountyData(), loadHexData()]);\n\n          if (!countyLoaded) {\n            console.error('[MapTab] 無法載入直轄市、縣(市)界線數據');\n            return;\n          }\n\n          if (!hexLoaded) {\n            console.error('[MapTab] 無法載入六角形網格數據');\n            return;\n          }\n\n          console.log('[MapTab] 所有數據載入完成，開始創建地圖');\n\n          const tryCreateMap = async () => {\n            if (attempts >= maxAttempts) {\n              console.error('[MapTab] 地圖初始化失敗，已達到最大嘗試次數');\n              return;\n            }\n\n            attempts++;\n            console.log(`[MapTab] 嘗試創建地圖 (${attempts}/${maxAttempts})`);\n\n            if (createMap(countyData.value)) {\n              console.log('[MapTab] 地圖創建成功，開始繪製圖層');\n              // 先繪製縣市界線（底層）\n              drawCounties();\n              // 再繪製六角形網格（上層）\n              drawHexGrid();\n            } else {\n              console.log('[MapTab] 地圖創建失敗，100ms 後重試');\n              setTimeout(tryCreateMap, 100);\n            }\n          };\n\n          tryCreateMap();\n        } else {\n          // Grid 模式：需要載入六角形網格數據，需要地圖投影來繪製\n          console.log('[MapTab] 開始載入網格模式數據...');\n          const hexLoaded = await loadHexData();\n\n          if (!hexLoaded) {\n            console.error('[MapTab] 無法載入六角形網格數據');\n            return;\n          }\n\n          console.log('[MapTab] 數據載入完成，開始創建網格視圖');\n\n          const tryCreateGrid = async () => {\n            if (attempts >= maxAttempts) {\n              console.error('[MapTab] 網格初始化失敗，已達到最大嘗試次數');\n              return;\n            }\n\n            attempts++;\n            console.log(`[MapTab] 嘗試創建網格視圖 (${attempts}/${maxAttempts})`);\n\n            if (createMap()) {\n              console.log('[MapTab] 網格視圖創建成功，開始繪製六角形網格');\n              drawHexGridOnly();\n            } else {\n              console.log('[MapTab] 網格視圖創建失敗，100ms 後重試');\n              setTimeout(tryCreateGrid, 100);\n            }\n          };\n\n          tryCreateGrid();\n        }\n      };\n\n      // 處理窗口大小調整（重新繪製整個地圖）\n      let resizeTimer = null;\n      const handleResize = () => {\n        // 防抖處理，避免頻繁重繪\n        if (resizeTimer) {\n          clearTimeout(resizeTimer);\n        }\n        resizeTimer = setTimeout(() => {\n          console.log('[MapTab] 窗口大小調整，重新繪製地圖');\n          initMap();\n        }, 300);\n      };\n\n      // 🧹 生命週期：組件掛載\n      onMounted(() => {\n        nextTick(() => {\n          initMap();\n        });\n\n        // 監聽窗口大小調整\n        window.addEventListener('resize', handleResize);\n      });\n\n      // 🧹 生命週期：組件卸載\n      onUnmounted(() => {\n        // 清除 resize timer\n        if (resizeTimer) {\n          clearTimeout(resizeTimer);\n        }\n\n        // 移除 resize 監聽器\n        window.removeEventListener('resize', handleResize);\n\n        if (svg) {\n          svg.remove();\n          svg = null;\n        }\n\n        // 清理工具提示\n        if (tooltip) {\n          tooltip.remove();\n          tooltip = null;\n        }\n\n        projection = null;\n        path = null;\n        zoom = null;\n        g = null;\n        isMapReady.value = false;\n      });\n\n      // 📤 返回組件公開的屬性和方法\n      return {\n        mapContainer,\n        mapContainerId,\n        displayMode,\n        toggleDisplayMode,\n      };\n    },\n  };\n</script>\n\n<template>\n  <!-- 🗺️ 地圖主容器 -->\n  <div id=\"map-container\" class=\"h-100 w-100 position-relative bg-transparent z-0\">\n    <!-- 🗺️ Leaflet 地圖容器 -->\n    <div :id=\"mapContainerId\" ref=\"mapContainer\" class=\"h-100 w-100\"></div>\n\n    <!-- 🎛️ 左側中間控制面板 -->\n    <div\n      class=\"position-absolute\"\n      style=\"top: 50%; left: 0; transform: translateY(-50%); z-index: 1000; padding: 1rem\"\n    >\n      <div class=\"bg-dark bg-opacity-75 rounded-3 p-3\">\n        <!-- 🎛️ 顯示模式選擇區域 -->\n        <div class=\"\">\n          <div class=\"d-flex flex-column gap-1\">\n            <button\n              type=\"button\"\n              class=\"btn border-0 my-country-btn my-font-sm-white px-4 py-3\"\n              :class=\"[displayMode === 'map' ? 'active' : '']\"\n              @click=\"toggleDisplayMode('map')\"\n            >\n              地圖模式\n            </button>\n            <button\n              type=\"button\"\n              class=\"btn border-0 my-country-btn my-font-sm-white px-4 py-3\"\n              :class=\"[displayMode === 'grid' ? 'active' : '']\"\n              @click=\"toggleDisplayMode('grid')\"\n            >\n              網格模式\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n  @import '../assets/css/common.css';\n\n  #map-container {\n    overflow: hidden;\n  }\n\n  :deep(.leaflet-container) {\n    background: #ffffff; /* 白色背景 */\n  }\n\n  :deep(.leaflet-popup-content-wrapper) {\n    background: rgba(0, 43, 127, 0.95); /* 諾魯深藍色半透明 */\n    color: #ffc61e; /* 金黃色文字 */\n    border: 2px solid #ffc61e; /* 金黃色邊框 */\n  }\n\n  :deep(.leaflet-popup-tip) {\n    background: rgba(0, 43, 127, 0.95); /* 諾魯深藍色半透明 */\n  }\n\n  :deep(.leaflet-tooltip) {\n    background-color: rgba(0, 43, 127, 0.95) !important; /* 諾魯深藍色 */\n    color: #ffc61e !important; /* 金黃色文字 */\n    border: 1px solid #ffc61e !important; /* 金黃色邊框 */\n    font-size: 14px;\n    padding: 8px 12px;\n    border-radius: 4px;\n    line-height: 1.4;\n  }\n\n  :deep(.map-tooltip) {\n    background-color: #333; /* 深灰色背景 */\n    color: #fff; /* 白色文字 */\n    border: none; /* 無邊框 */\n  }\n</style>\n","/**\n * 📦 數據存儲模組 (Data Store Module)\n *\n * 管理城市圖層數據和地圖導航功能\n * 使用 Pinia 狀態管理系統和 Vue 3 Composition API\n */\n\n// 核心依賴\nimport { defineStore } from 'pinia';\nimport { ref } from 'vue';\n\n/**\n * 🏪 數據存儲商店定義 (Data Store Definition)\n *\n * 使用 Pinia 的 defineStore 創建一個名為 'data' 的狀態管理商店。\n * 採用 Composition API 語法，提供更好的 TypeScript 支援和代碼組織。\n *\n * @returns {Object} 包含所有狀態和方法的商店對象\n */\nexport const useDataStore = defineStore(\n  'data',\n  () => {\n    // ------------------------------------------------------------\n    // 地圖實例管理\n    const mapInstance = ref(null);\n\n    const setMapInstance = (map) => {\n      mapInstance.value = map;\n    };\n\n    return {\n      mapInstance, // 地圖實例\n      setMapInstance, // 設定地圖實例\n    };\n  },\n  {\n    persist: true,\n  }\n);\n","import { render } from \"./MapTab.vue?vue&type=template&id=c2bef126&scoped=true\"\nimport script from \"./MapTab.vue?vue&type=script&lang=js\"\nexport * from \"./MapTab.vue?vue&type=script&lang=js\"\n\nimport \"./MapTab.vue?vue&type=style&index=0&id=c2bef126&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-c2bef126\"]])\n\nexport default __exports__","import { render } from \"./HomeView.vue?vue&type=template&id=3342f0b3\"\nimport script from \"./HomeView.vue?vue&type=script&lang=js\"\nexport * from \"./HomeView.vue?vue&type=script&lang=js\"\n\nimport \"./HomeView.vue?vue&type=style&index=0&id=3342f0b3&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * 🚀 Vue Router 路由配置\n *\n * 長照空間分析系統的路由管理\n * 使用 Vue Router 4 進行單頁應用程式路由控制\n *\n * @author 長照空間分析團隊\n * @version 1.0.0\n */\n\nimport { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\n\n/**\n * 📍 路由配置陣列\n * 定義應用程式的所有路由規則\n */\nconst routes = [\n  {\n    path: '/', // 🏠 根路徑\n    name: 'Home', // 路由名稱\n    component: HomeView, // 對應的 Vue 組件\n  },\n];\n\n/**\n * 🛣️ 路由器實例創建\n *\n * 配置說明：\n * - history: 使用 HTML5 History API 模式\n * - base: 設定應用程式的基礎路徑為 '/30DayMapChallenge-26_Transport/'\n * - routes: 路由配置陣列\n */\nconst router = createRouter({\n  history: createWebHistory('/30DayMapChallenge-26_Transport/'),\n  routes,\n});\n\nexport default router;\n","/**\n * 🚀 應用程式主入口文件 (Main Application Entry Point)\n *\n * 本文件是整個 Vue.js 應用程式的啟動入口，負責初始化所有核心系統和第三方依賴。\n * 採用模組化設計，確保各系統間的依賴關係清晰明確。\n *\n * 📋 主要功能模組：\n * 1. 🎨 樣式系統初始化 - Bootstrap 5 + 自定義主題 + 第三方 UI 庫樣式\n * 2. 🧩 Vue 3 應用程式核心 - 使用 Composition API 的現代化 Vue 架構\n * 3. 🗺️ 路由系統配置 - Vue Router 4 單頁應用程式導航管理\n * 4. 📦 狀態管理系統 - Pinia 全域狀態管理和數據持久化\n * 5. 🌍 DOM 掛載與渲染 - 將應用程式掛載到 HTML 容器中\n * 6. 🔧 第三方庫整合 - D3.js 地圖、Font Awesome 圖示、Bootstrap 組件\n *\n * 🏗️ 技術架構：\n * - Vue 3.3+ (Composition API + <script setup> 語法)\n * - Vue Router 4 (聲明式路由配置)\n * - Pinia 2+ (輕量級狀態管理，替代 Vuex)\n * - Bootstrap 5.3+ (響應式 UI 框架)\n * - D3.js 7+ (數據可視化和地圖繪製庫)\n * - Font Awesome 6+ (向量圖示庫)\n *\n * 🔄 初始化流程：\n * 1. 載入所有必要的樣式和 JavaScript 依賴\n * 2. 創建 Vue 應用程式實例\n * 3. 配置並註冊路由系統\n * 4. 配置並註冊狀態管理系統\n * 5. 將應用程式掛載到 DOM 元素\n * 6. 輸出初始化完成日誌\n *\n * 📁 相關文件：\n * - ./App.vue - 根組件\n * - ./router/index.js - 路由配置\n * - ./stores/ - Pinia 狀態管理模組\n * - ./assets/css/ - 自定義樣式文件\n */\n\n// 🔧 Vue 核心模組引入 (Vue Core Module Imports)\nimport { createApp } from 'vue';\nimport { createPinia } from 'pinia';\n\n// 🧩 應用程式組件引入 (Application Component Imports)\nimport App from './App.vue';\nimport router from './router';\n\n// 🎨 引入第三方樣式文件 (Import Third-Party Style Files)\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Bootstrap 5 CSS 框架\nimport '@fortawesome/fontawesome-free/css/all.min.css'; // Font Awesome 圖示庫\n\n// 🎨 引入自定義樣式文件 (Import Custom Style Files)\nimport './assets/css/common.css'; // 共用樣式（已包含變數和主題配置）\n\n// ⚙️ 引入第三方 JavaScript 文件 (Import Third-Party JavaScript Files)\nimport 'bootstrap/dist/js/bootstrap.bundle.min.js'; // Bootstrap JS（含 Popper.js）\n// 提供下拉選單、模態框、工具提示等互動功能\n\n// 🐛 調試資訊輸出 (Debug Information Output)\nconsole.log('🎨 樣式文件載入完成');\n\n// 🚀 創建並配置 Vue 應用程式實例 (Create and Configure Vue Application Instance)\nconst app = createApp(App);\n\n// 📦 創建 Pinia 狀態管理實例 (Create Pinia State Management Instance)\nconst pinia = createPinia();\n\n// 🗺️ 註冊 Vue Router 路由系統 (Register Vue Router Navigation System)\napp.use(router);\n\n// 📦 註冊 Pinia 狀態管理系統 (Register Pinia State Management System)\napp.use(pinia);\n\n// 🌍 掛載應用程式到 DOM 元素 (Mount Application to DOM Element)\n// 將 Vue 應用程式掛載到 index.html 中 id=\"app\" 的元素上\napp.mount('#app');\n\n// 🐛 應用程式啟動完成的調試資訊 (Application Startup Debug Information)\nconsole.log('🚀 空間分析視覺化平台已啟動');\nconsole.log('📦 Pinia 狀態管理已初始化');\nconsole.log('🗺️ Vue Router 路由系統已就緒');\nconsole.log('🎨 Bootstrap 5 UI 框架已載入');\nconsole.log('🗺️ D3.js 地圖庫已準備就緒');\nconsole.log('🔤 Font Awesome 圖示庫已載入');\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_30DayMapChallenge_26_Transport\"] = self[\"webpackChunk_30DayMapChallenge_26_Transport\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(9936); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["id","class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_router_view","name","__exports__","render","_component_MapTab","onMapReady","$setup","setMapInstance","style","mapContainerId","ref","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","type","_normalizeClass","displayMode","onClick","_cache","$event","toggleDisplayMode","useDataStore","defineStore","mapInstance","map","value","persist","emits","setup","_","emit","mapContainer","svg","projection","path","zoom","g","tooltip","isMapReady","Math","random","toString","substr","countyData","hexData","loadCountyData","async","console","log","countyResponse","fetch","ok","Error","status","json","features","length","error","createTooltip","existingTooltip","querySelector","remove","document","createElement","className","position","pointerEvents","opacity","padding","appendChild","loadHexData","hexResponse","drawCounties","selectAll","data","enter","append","attr","drawHexGridOnly","hexPaths","size","on","event","d","d3","this","properties","tooltipHTML","Object","keys","forEach","key","undefined","innerHTML","mouseX","mouseY","left","top","drawAngleArrows","mode","call","transform","rect","getBoundingClientRect","width","height","fitExtent","center","scale","translate","scaleExtent","drawHexGrid","arrowsGroup","raise","arrowLength","offsetDistance","validBorrow","validReturn","sampleCentroids","feature","idx","borrowDeg","returnDeg","cx","cy","geometry","coordinates","coords","polygon","coord","centroid","projected","e","warn","Number","isFinite","push","drawOneArrow","deg","color","markerId","offsetSign","pointToCenter","isNaN","rad","PI","dx","cos","dy","sin","ox","oy","x1","y1","x2","y2","beforeB","afterB","beforeR","afterR","bbox","node","getBBox","totalArrows","createMap","fitFeature","initMap","attempts","maxAttempts","countyLoaded","hexLoaded","Promise","all","tryCreateMap","setTimeout","tryCreateGrid","resizeTimer","handleResize","clearTimeout","onMounted","nextTick","window","addEventListener","onUnmounted","removeEventListener","components","MapTab","dataStore","routes","component","HomeView","router","createRouter","history","createWebHistory","app","createApp","App","pinia","createPinia","use","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","r","n","getter","__esModule","a","definition","o","defineProperty","enumerable","get","globalThis","Function","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}