(function(){"use strict";var e={9936:function(e,t,o){var a=o(5130),n=o(657),r=o(6768);const l={id:"app",class:"d-flex flex-column vh-100"},s={class:"d-flex flex-column overflow-hidden"};function c(e,t,o,a,n,c){const i=(0,r.g2)("router-view");return(0,r.uX)(),(0,r.CE)("div",l,[(0,r.Lk)("div",s,[(0,r.bF)(i)])])}var i={name:"App"},u=o(1241);const p=(0,u.A)(i,[["render",c]]);var d=p,f=o(1387);const g={class:"vh-100 vw-100 overflow-hidden"};function v(e,t,o,a,n,l){const s=(0,r.g2)("MapTab");return(0,r.uX)(),(0,r.CE)("div",g,[(0,r.bF)(s,{onMapReady:a.setMapInstance},null,8,["onMapReady"])])}var h=o(4232);const m={id:"map-container",class:"h-100 w-100 position-relative bg-transparent z-0"},y=["id"],b={class:"position-absolute",style:{top:"50%",left:"0",transform:"translateY(-50%)","z-index":"1000",padding:"1rem"}},M={class:"bg-dark bg-opacity-75 rounded-3 p-3"},w={class:""},T={class:"d-flex flex-column gap-1"};function k(e,t,o,a,n,l){return(0,r.uX)(),(0,r.CE)("div",m,[(0,r.Lk)("div",{id:a.mapContainerId,ref:"mapContainer",class:"h-100 w-100"},null,8,y),(0,r.Lk)("div",b,[(0,r.Lk)("div",M,[(0,r.Lk)("div",w,[(0,r.Lk)("div",T,[(0,r.Lk)("button",{type:"button",class:(0,h.C4)(["btn border-0 my-country-btn my-font-sm-white px-4 py-3",["map"===a.displayMode?"active":""]]),onClick:t[0]||(t[0]=e=>a.toggleDisplayMode("map"))}," 地圖模式 ",2),(0,r.Lk)("button",{type:"button",class:(0,h.C4)(["btn border-0 my-country-btn my-font-sm-white px-4 py-3",["grid"===a.displayMode?"active":""]]),onClick:t[1]||(t[1]=e=>a.toggleDisplayMode("grid"))}," 網格模式 ",2)])])])])])}o(4114),o(8111),o(2489),o(7588),o(1701);var x=o(144),A=o(8963);const E=(0,n.nY)("data",(()=>{const e=(0,x.KR)(null),t=t=>{e.value=t};return{mapInstance:e,setMapInstance:t}}),{persist:!0});
/**
 * ═══════════════════════════════════════════════════════════════════════════
 * 🗺️ MapTab.vue - D3.js 台灣地圖組件
 * ═══════════════════════════════════════════════════════════════════════════
 *
 * @fileoverview
 * 這是一個基於 D3.js 的台灣地圖視覺化組件，同時顯示縣市界線和登革熱網格數據。
 * 本組件負責載入、處理和渲染台灣直轄市、縣(市)界線和登革熱病例網格數據。
 *
 * ─────────────────────────────────────────────────────────────────────────
 * 📋 核心功能
 * ─────────────────────────────────────────────────────────────────────────
 * 1. 縣市邊界渲染：
 *    ✓ 載入直轄市、縣(市)界線1140318.geojson
 *    ✓ 繪製所有台灣直轄市、縣(市)界線
 *
 * 2. 登革熱網格渲染：
 *    ✓ 載入 dengue_grid_counts_1km_2023_land_only.geojson
 *    ✓ 根據 level 屬性繪製5級風險等級網格
 *    ✓ 只顯示病例數 > 0 的網格
 *    ✓ 使用5級色票：深藍(1) → 綠(2) → 黃橙(3) → 橙(4) → 紅(5)（最上層）
 *
 * 3. 視覺元素：
 *    ✓ 縣市界線：淺灰細邊框，無填充（底層）
 *    ✓ 登革熱網格：5級色票填充，無邊框（最上層）
 *    ✓ 白色地圖背景
 *
 * 4. 交互功能：
 *    ✓ 滾輪縮放控制
 *    ✓ 拖動平移導航
 *    ✓ 滑鼠懸停顯示網格屬性資訊
 *    ✓ 網格高亮效果
 *
 * ─────────────────────────────────────────────────────────────────────────
 * 🎨 配色主題
 * ─────────────────────────────────────────────────────────────────────────
 * 白色      #ffffff  → 地圖背景
 * 淺灰色    #cccccc  → 縣市邊框
 * 無填充    none     → 縣市區域
 * 5級色票            → 登革熱風險等級（最上層）
 *   Level 1  #1a237e → 深藍色
 *   Level 2  #4caf50 → 綠色
 *   Level 3  #fbc02d → 黃橙色
 *   Level 4  #ff6f00 → 橙色
 *   Level 5  #d32f2f → 紅色
 *
 * ─────────────────────────────────────────────────────────────────────────
 * 🛠️ 技術棧
 * ─────────────────────────────────────────────────────────────────────────
 * @requires vue                 - Vue 3.2+ (Composition API)
 * @requires d3                  - D3.js 7.8+ (地圖繪製庫)
 * @requires @/stores/dataStore  - Pinia 狀態管理
 *
 * ─────────────────────────────────────────────────────────────────────────
 * 📁 數據來源
 * ─────────────────────────────────────────────────────────────────────────
 * 直轄市、縣(市)界線：直轄市、縣(市)界線1140318.geojson
 * 登革熱網格數據：dengue_grid_counts_1km_2023_land_only.geojson
 * 路徑：public/data/geojson/
 *
 * ─────────────────────────────────────────────────────────────────────────
 * 🔧 使用方式
 * ─────────────────────────────────────────────────────────────────────────
 * <MapTab @map-ready="handleMapReady" />
 *
 * @event map-ready - 地圖初始化完成時觸發，返回地圖實例
 *
 * ─────────────────────────────────────────────────────────────────────────
 * 📝 維護者
 * ─────────────────────────────────────────────────────────────────────────
 * @author Kevin Cheng
 * @version 4.0.0
 * @since 2024
 * @license MIT
 *
 * ═══════════════════════════════════════════════════════════════════════════
 */var C={name:"MapTab",emits:["map-ready"],setup(e,{emit:t}){E();const o=(0,x.KR)(null);let a=null,n=null,l=null,s=null,c=null,i=null;const u=(0,x.KR)(!1),p=(0,x.KR)(`leaflet-map-${Math.random().toString(36).substr(2,9)}`),d=(0,x.KR)("map"),f=(0,x.KR)(null),g=(0,x.KR)(null),v=((0,x.KR)(null),async()=>{try{console.log("[MapTab] 開始載入直轄市、縣(市)界線 GeoJSON 數據...");const e=await fetch("/30DayMapChallenge-26_Transport/data/geojson/臺北市區界圖_20220915.geojson");if(!e.ok)throw new Error(`直轄市、縣(市)界線數據載入失敗: HTTP ${e.status}`);return f.value=await e.json(),console.log("[MapTab] 臺北市區界數據載入成功"),console.log("  - 區數量:",f.value.features?.length||0),!0}catch(e){return console.error("[MapTab] 直轄市、縣(市)界線數據載入失敗:",e),!1}}),h=()=>{if(!o.value)return;const e=o.value.querySelector(".map-tooltip");e&&e.remove(),i=document.createElement("div"),i.className="map-tooltip",i.style.position="absolute",i.style.pointerEvents="none",i.style.opacity="0",i.style.padding="4px 8px",o.value.appendChild(i),console.log("[MapTab] 工具提示元素創建成功")},m=async()=>{try{console.log("[MapTab] 開始載入 500m 方格 GeoJSON 數據...");const e=await fetch("/30DayMapChallenge-26_Transport/data/geojson/grid_with_weighted_angle_stats_500m.geojson");if(!e.ok)throw new Error(`方格數據載入失敗: HTTP ${e.status}`);return g.value=await e.json(),console.log("[MapTab] 500m 方格數據載入成功"),console.log("  - 網格數量:",g.value.features?.length||0),!0}catch(e){return console.error("[MapTab] 500m 方格數據載入失敗:",e),!1}},y=()=>{if(c&&f.value)try{console.log("[MapTab] 開始繪製直轄市、縣(市)界線 GeoJSON"),c.selectAll(".county").data(f.value.features).enter().append("path").attr("d",l).attr("class","county").attr("fill","none").attr("stroke","#222").attr("stroke-width",1.2).attr("stroke-opacity",.9).attr("vector-effect","non-scaling-stroke"),console.log("[MapTab] 直轄市、縣(市)界線 GeoJSON 繪製完成")}catch(e){console.error("[MapTab] 直轄市、縣(市)界線 GeoJSON 繪製失敗:",e)}else console.error("[MapTab] 無法繪製直轄市、縣(市)界線: g=",!!c,"countyData=",!!f.value)},b=()=>{if(c&&g.value&&l)try{console.log("[MapTab] 開始繪製方格（Grid 模式）"),c.selectAll(".hex-grid").remove(),c.selectAll(".county").remove();const e=c.selectAll(".hex-grid").data(g.value.features).enter().append("path").attr("d",l).attr("class","hex-grid").attr("fill","none").attr("stroke","#999").attr("stroke-width",.5).attr("stroke-opacity",.7).attr("shape-rendering","crispEdges").attr("vector-effect","non-scaling-stroke").style("cursor","pointer");console.log("[DEBUG] Grid 模式 - 繪製了多少個 path 元素:",e.size()),e.on("mouseover",(function(e,t){if(A.Ltv(this).attr("stroke-width",.9).attr("stroke-opacity",1),i){const a=t.properties;let n="";Object.keys(a).forEach((e=>{const t=a[e];n+=`<div><strong>${e}:</strong> ${null!==t&&void 0!==t?t:"N/A"}</div>`})),i.innerHTML=n;const[r,l]=A.WnM(e,o.value);i.style.left=r+10+"px",i.style.top=l-10+"px",i.style.opacity=1}})).on("mousemove",(function(e){if(i){const[t,a]=A.WnM(e,o.value);i.style.left=t+10+"px",i.style.top=a-10+"px"}})).on("mouseout",(function(){A.Ltv(this).attr("stroke-width",.5).attr("stroke-opacity",.7),i&&(i.style.opacity=0)})),console.log("[MapTab] 方格（Grid 模式）繪製完成"),T()}catch(e){console.error("[MapTab] 方格繪製失敗:",e)}else console.error("[MapTab] 無法繪製方格: g=",!!c,"hexData=",!!g.value,"path=",!!l)},M=async e=>{if(d.value=e,console.log("[MapTab] 切換顯示模式:",e),"map"===d.value){if(f.value||await v(),g.value||await m(),a&&!n&&(a.remove(),a=null),n&&l)a&&s&&a.call(s.transform,A.GSI);else{const e=o.value.getBoundingClientRect();if(e.width>0&&e.height>0){const t=e.width,r=e.height;a&&a.remove(),a=A.Ltv(o.value).append("svg").attr("width",t).attr("height",r).style("background","#ffffff"),n=A.bAh(),f.value?n.fitExtent([[20,20],[t-20,r-20]],f.value):n.center([121,25.05]).scale(45e3).translate([t/2,r/2]),l=A.zFW().projection(n),c=a.append("g"),s=A.s_O().scaleExtent([.8,12]).on("zoom",(e=>{c.attr("transform",e.transform)})),a.call(s),a.call(s.transform,A.GSI),h(),u.value=!0}}y(),w()}else{if(g.value||await m(),f.value=null,a&&!n&&(a.remove(),a=null),n&&l)a&&s&&a.call(s.transform,A.GSI);else{const e=o.value.getBoundingClientRect();if(e.width>0&&e.height>0){const t=e.width,r=e.height;a&&a.remove(),a=A.Ltv(o.value).append("svg").attr("width",t).attr("height",r).style("background","#ffffff"),n=A.bAh(),f.value?n.fitExtent([[20,20],[t-20,r-20]],f.value):n.center([121,25.05]).scale(45e3).translate([t/2,r/2]),l=A.zFW().projection(n),c=a.append("g"),s=A.s_O().scaleExtent([.8,12]).on("zoom",(e=>{c.attr("transform",e.transform)})),a.call(s),a.call(s.transform,A.GSI),h(),u.value=!0}}b()}},w=()=>{if(c&&g.value&&l)try{console.log("[MapTab] 開始繪製方格 GeoJSON"),c.selectAll(".hex-grid").remove(),console.log("[MapTab] 使用 Map 模式繪製（地圖投影）"),console.log("[MapTab] path generator:",!!l,"g:",!!c);const e=c.selectAll(".hex-grid").data(g.value.features).enter().append("path").attr("d",l).attr("class","hex-grid").attr("fill","none").attr("stroke","#999").attr("stroke-width",.5).attr("stroke-opacity",.7).attr("shape-rendering","crispEdges").attr("vector-effect","non-scaling-stroke").style("cursor","pointer");console.log("[DEBUG] 繪製了多少個 path 元素:",e.size()),e.on("mouseover",(function(e,t){if(A.Ltv(this).attr("fill-opacity",1).attr("stroke-width",2),i){const a=t.properties;let n="";Object.keys(a).forEach((e=>{const t=a[e];n+=`<div><strong>${e}:</strong> ${null!==t&&void 0!==t?t:"N/A"}</div>`})),i.innerHTML=n;const[r,l]=A.WnM(e,o.value);i.style.left=r+10+"px",i.style.top=l-10+"px",i.style.opacity=1}})).on("mousemove",(function(e){if(i){const[t,a]=A.WnM(e,o.value);i.style.left=t+10+"px",i.style.top=a-10+"px"}})).on("mouseout",(function(){A.Ltv(this).attr("fill-opacity",.8).attr("stroke-width",.5),i&&(i.style.opacity=0)})),console.log("[MapTab] 方格（地圖模式）繪製完成"),console.log("  - SVG 中的 path 元素數量:",c.selectAll("path").size()),console.log("  - hex-grid class 元素數量:",c.selectAll(".hex-grid").size()),T()}catch(e){console.error("[MapTab] 方格繪製失敗:",e)}else console.error("[MapTab] 無法繪製方格: g=",!!c,"hexData=",!!g.value,"path=",!!l)},T=()=>{if(!c||!g.value||!l)return;c.selectAll(".angle-arrows").remove();const e=c.append("g").attr("class","angle-arrows").attr("pointer-events","none");e.raise&&e.raise();const t=g.value.features||[],o=8,a=0;let r=0,s=0,i=[];t.forEach(((t,c)=>{const u=t.properties?.["借車角度平均"],p=t.properties?.["還車角度平均"];let d,f;try{if(t.geometry&&t.geometry.coordinates&&t.geometry.coordinates[0]){const e=t.geometry.coordinates[0],o=e.map((e=>[e[0],e[1]])),a=A.l8R(o),r=n(a);d=r[0],f=r[1]}else[d,f]=l.centroid(t)}catch(b){return void console.warn("Centroid calculation failed:",b)}if(!Number.isFinite(d)||!Number.isFinite(f))return;c<5&&(u||p)&&i.push({cx:d,cy:f,borrowDeg:u,returnDeg:p});const g=(t,n,r,l,s=!1)=>{if(null===t||void 0===t||Number.isNaN(t))return;const c=(t-90)*Math.PI/180,i=Math.cos(c)*o,u=Math.sin(c)*o,p=-Math.sin(c)*a*l,g=Math.cos(c)*a*l,v=s?d+p-i:d+p,h=s?f+g-u:f+g,m=s?d+p:d+p+i,y=s?f+g:f+g+u;e.append("line").attr("x1",v).attr("y1",h).attr("x2",m).attr("y2",y).attr("stroke",n).attr("stroke-width",1.5).attr("stroke-linecap","butt").attr("stroke-opacity",.95).attr("class","angle-arrow")},v=e.selectAll(".angle-arrow").size();null===u||void 0===u||Number.isNaN(u)||g(u,"var(--map-arrow-borrow)","arrow-borrow",1,!1);const h=e.selectAll(".angle-arrow").size();h>v&&r++;const m=e.selectAll(".angle-arrow").size();null===p||void 0===p||Number.isNaN(p)||g(p+180,"var(--map-arrow-return)","arrow-return",-1,!0);const y=e.selectAll(".angle-arrow").size();y>m&&s++}));let u=null;try{u=e.node()?.getBBox?.()}catch(p){u=null}e.raise&&e.raise(),console.log("[MapTab] 角度箭頭繪製完成",{features:t.length,validBorrow:r,validReturn:s,totalArrows:e.selectAll(".angle-arrow").size(),bbox:u,sampleCentroids:i})},k=(e=null)=>{if(!o.value)return!1;const r=o.value.getBoundingClientRect();if(0===r.width||0===r.height)return console.warn("[MapTab] 容器尺寸為零，延遲初始化"),!1;try{const i=r.width,p=r.height;return a=A.Ltv(o.value).append("svg").attr("width",i).attr("height",p).style("background","#ffffff"),n=A.bAh(),e?n.fitExtent([[20,20],[i-20,p-20]],e):n.center([121,25.05]).scale(45e3).translate([i/2,p/2]),l=A.zFW().projection(n),c=a.append("g"),s=A.s_O().scaleExtent([.8,12]).on("zoom",(e=>{c.attr("transform",e.transform)})),a.call(s),a.call(s.transform,A.GSI),h(),u.value=!0,t("map-ready",{svg:a,projection:n,path:l}),console.log("[MapTab] D3.js 地圖創建成功"),!0}catch(i){return console.error("[MapTab] D3.js 地圖創建失敗:",i),!1}},C=async()=>{let e=0;const t=20;if("map"===d.value){console.log("[MapTab] 開始載入地圖模式數據...");const[o,a]=await Promise.all([v(),m()]);if(!o)return void console.error("[MapTab] 無法載入直轄市、縣(市)界線數據");if(!a)return void console.error("[MapTab] 無法載入六角形網格數據");console.log("[MapTab] 所有數據載入完成，開始創建地圖");const n=async()=>{e>=t?console.error("[MapTab] 地圖初始化失敗，已達到最大嘗試次數"):(e++,console.log(`[MapTab] 嘗試創建地圖 (${e}/${t})`),k(f.value)?(console.log("[MapTab] 地圖創建成功，開始繪製圖層"),y(),w()):(console.log("[MapTab] 地圖創建失敗，100ms 後重試"),setTimeout(n,100)))};n()}else{console.log("[MapTab] 開始載入網格模式數據...");const o=await m();if(!o)return void console.error("[MapTab] 無法載入六角形網格數據");console.log("[MapTab] 數據載入完成，開始創建網格視圖");const a=async()=>{e>=t?console.error("[MapTab] 網格初始化失敗，已達到最大嘗試次數"):(e++,console.log(`[MapTab] 嘗試創建網格視圖 (${e}/${t})`),k()?(console.log("[MapTab] 網格視圖創建成功，開始繪製六角形網格"),b()):(console.log("[MapTab] 網格視圖創建失敗，100ms 後重試"),setTimeout(a,100)))};a()}};let O=null;const _=()=>{O&&clearTimeout(O),O=setTimeout((()=>{console.log("[MapTab] 窗口大小調整，重新繪製地圖"),C()}),300)};return(0,r.sV)((()=>{(0,r.dY)((()=>{C()})),window.addEventListener("resize",_)})),(0,r.hi)((()=>{O&&clearTimeout(O),window.removeEventListener("resize",_),a&&(a.remove(),a=null),i&&(i.remove(),i=null),n=null,l=null,s=null,c=null,u.value=!1})),{mapContainer:o,mapContainerId:p,displayMode:d,toggleDisplayMode:M}}};const O=(0,u.A)(C,[["render",k],["__scopeId","data-v-c2bef126"]]);var _=O,j={name:"HomeView",components:{MapTab:_},setup(){const e=E(),t=t=>e.setMapInstance(t);return{setMapInstance:t}}};const L=(0,u.A)(j,[["render",v]]);var N=L;const z=[{path:"/",name:"Home",component:N}],D=(0,f.aE)({history:(0,f.LA)("/30DayMapChallenge-26_Transport/"),routes:z});var G=D;o(323);console.log("🎨 樣式文件載入完成");const R=(0,a.Ef)(d),I=(0,n.Ey)();R.use(G),R.use(I),R.mount("#app"),console.log("🚀 空間分析視覺化平台已啟動"),console.log("📦 Pinia 狀態管理已初始化"),console.log("🗺️ Vue Router 路由系統已就緒"),console.log("🎨 Bootstrap 5 UI 框架已載入"),console.log("🗺️ D3.js 地圖庫已準備就緒"),console.log("🔤 Font Awesome 圖示庫已載入")}},t={};function o(a){var n=t[a];if(void 0!==n)return n.exports;var r=t[a]={exports:{}};return e[a].call(r.exports,r,r.exports,o),r.exports}o.m=e,function(){var e=[];o.O=function(t,a,n,r){if(!a){var l=1/0;for(u=0;u<e.length;u++){a=e[u][0],n=e[u][1],r=e[u][2];for(var s=!0,c=0;c<a.length;c++)(!1&r||l>=r)&&Object.keys(o.O).every((function(e){return o.O[e](a[c])}))?a.splice(c--,1):(s=!1,r<l&&(l=r));if(s){e.splice(u--,1);var i=n();void 0!==i&&(t=i)}}return t}r=r||0;for(var u=e.length;u>0&&e[u-1][2]>r;u--)e[u]=e[u-1];e[u]=[a,n,r]}}(),function(){o.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return o.d(t,{a:t}),t}}(),function(){o.d=function(e,t){for(var a in t)o.o(t,a)&&!o.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})}}(),function(){o.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}}(),function(){var e={524:0};o.O.j=function(t){return 0===e[t]};var t=function(t,a){var n,r,l=a[0],s=a[1],c=a[2],i=0;if(l.some((function(t){return 0!==e[t]}))){for(n in s)o.o(s,n)&&(o.m[n]=s[n]);if(c)var u=c(o)}for(t&&t(a);i<l.length;i++)r=l[i],o.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return o.O(u)},a=self["webpackChunk_30DayMapChallenge_26_Transport"]=self["webpackChunk_30DayMapChallenge_26_Transport"]||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))}();var a=o.O(void 0,[504],(function(){return o(9936)}));a=o.O(a)})();
//# sourceMappingURL=app.ef500637.js.map